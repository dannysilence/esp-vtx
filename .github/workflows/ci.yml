name: esp-vtx air and ground 

on:
  push:
    branches: [ "master", "wfb-gcs"]
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    
jobs:
  init:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
    - name: Create Release
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }}
        release_name: esp-vtx ${{ steps.tag_version.outputs.new_tag }}
        body: ${{ steps.tag_version.outputs.changelog }}
        draft: false
        prerelease: false
        #force: true
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt


  air:
    runs-on: ubuntu-latest
    needs: [init]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        target: [esp32]
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: esp-idf build
      uses: espressif/esp-idf-ci-action@v1
      id: run_build
      with:
        esp_idf_version: v4.4
        target: ${{ matrix.target }}
        path: 'air_firmware'
    - name: Get Release File Name & Upload URL
      id: get_release_info
      run: |
        echo ::set-output name=file_name::air_firmware # RepositoryName-v1.0.0
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ steps.get_version.outputs.VERSION }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./air_firmware/build/air_firmware.bin
        asset_name: ${{ steps.get_release_info.outputs.file_name }}-${{ matrix.target }}.bin
        asset_content_type: application/zip

