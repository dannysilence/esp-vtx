name: esp-vtx air and ground 

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    
jobs:
  air:

    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: esp-idf build
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v4.4
        target: esp32
        path: 'air_firmware'

  ground:
    permissions:
      contents: write
      packages: write 
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [armhf, arm64]
        include:
        - target: armhf
          cpu: cortex-a7
          base_image: raspios_lite:latest
        - target: arm64
          cpu: cortex-a53
          base_image: raspios_lite_arm64:latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
    - name: build 
      uses: pguyot/arm-runner-action@v2.5.2
      id: build_image
      with:
        image_additional_mb: 1024
        base_image: ${{ matrix.base_image }}
        cpu: ${{ matrix.cpu }}
        #bind_mount_repository: true
        copy_repository_path: '/src'
        copy_artifact_path: gs-${{ matrix.target }}.zip
        commands: |
          echo "commands to build gs"
          cd /src/gs
          mkdir ./dst
          apt-get update -y
          apt install -y libdrm-dev libgbm-dev libgles2-mesa-dev libpcap-dev libturbojpeg0-dev libts-dev libsdl2-dev libfreetype6-dev 
          make -j4
          ls ./ -faln
          mv gs ./dst/ 
          mv ../README.md ./dst/
          cd dst
          zip gs-${{ matrix.target }}.zip gs README.md
          cd /src
          mv gs/dst/gs-${{ matrix.target }}.zip ./
          echo "Done with ${{ steps.get_version.outputs.VERSION }}"
    - name: Create Release
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }}
        release_name: Ground Station ${{ steps.tag_version.outputs.new_tag }}
        body: ${{ steps.tag_version.outputs.changelog }}
        draft: false
        prerelease: false
        #force: true
    - name: Upload Release
      if:  github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./gs-${{ matrix.target }}.zip
        #asset_name: gs-${{ matrix.target }}.zip
        asset_content_type: application/zip
        
            
        
